proxy_cache_path /var/cache/nginx/auth_cache keys_zone=auth_cache:1m max_size=1m;

# Redirect HTTP to HTTPS
server {
  listen                    80;
  server_name               protected.example.com;
  return                    301 https://$host$request_uri;
}

server {
  listen                    443 ssl http2;
  listen                    [::]:443 ssl http2;
  server_name               protected.example.com;

  # HTTP Strict Transport Security
  add_header                Strict-Transport-Security "max-age=63072000; includeSubdomains;";
  add_header                X-Frame-Options "DENY";

  ssl_certificate           /opt/certs/wild.example.com.pem.chain.cer;
  ssl_certificate_key       /opt/certs/wild.example.pem.key;
  ssl_session_timeout       5m;

  # Restrict TLS Protocols and Ciphers
  ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers               'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

  # Server Cipher Preferences
  ssl_prefer_server_ciphers on;
  ssl_session_cache         shared:SSL:10m;

  expires -1;

  resolver 127.0.0.1;

  set $auth_api_endpoint    "http://127.0.0.1:30001/utilities/authenticate";
  set $auth_api_key         "apitoken";

  location / {
    # Checks the authentication cache. If no result is found
    # then it will redirect the user to the login page.

    auth_request            /_auth_request;
    error_page              401 = @unauthorized;

    # Authenticate passed/cached - route to backend
    proxy_pass              http://127.0.0.1:8000$request_uri;
  }

  # Interal route to redirect the user to the login page.

  location @unauthorized {
    return                  302 /login?redirect_uri=$scheme://$host$request_uri;
  }

  location /unauthorized {
    return 401;
  }

  # Internal route which will check the auth cache
  # using the dleauthsession cookie. If a match is
  # found it will return 200OK (as cached in /_authenticate).
  # If no cache is found it will default by returning 401
  # Unauthorized.

  location /_auth_request {
    internal;

    # Check the cache set by the /_authenticate route

    proxy_cache             auth_cache;
    proxy_cache_key         "$cookie_dleauthsession";
    proxy_cache_valid       200 1m; # never matches. don't cache anything.

    # If no cache is found default as 401 Unauthorized.
    proxy_pass              https://localhost/unauthorized;
  }

  # Login route to serve up the login page. This page is
  # responsible for submitting the login details to the
  # public /authenticate route.

  location = /login {
    root                    /usr/share/nginx/html/login;
    try_files               /index.html =404;
  }

  # Public route which transforms the form body and builds
  # the JSON request body required to hit the backend
  # authentication service.

  location = /authenticate {
    js_content              invokeAuthBackend;
    add_header              Set-Cookie "authsession=$request_id; Domain=$host";
  }

  # Internal route which is used to invoke and cache the
  # backend authentication service result.

  location = /_authenticate {
    internal;
    proxy_method            POST;
    proxy_set_header        Content-Type "application/json";
    proxy_set_header        x-api-key "$auth_api_key";
    proxy_pass              "$auth_api_endpoint";

    proxy_cache             auth_cache;
    proxy_cache_key         "$request_id";
    proxy_cache_valid       200 1h;
    proxy_ignore_headers    Cache-Control Expires Set-Cookie;
  }
}
